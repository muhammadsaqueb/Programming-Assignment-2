# Function to create a special "matrix" object that can cache its inverse
makeCacheMatrix <- function(x = matrix()) {
inv <- NULL
set <- function(y) {
x <<- y
inv <<- NULL
}
get <- function() x
setinverse <- function(inverse) inv <<- inverse
getinverse <- function() inv
list(set = set, get = get, setinverse = setinverse, getinverse = getinverse)
}
# Function to compute the inverse of the special "matrix" and cache it
cacheSolve <- function(x, ...) {
inv <- x$getinverse()
if(!is.null(inv)) {
message("getting cached data")
return(inv)
}
data <- x$get()
inv <- solve(data, ...)
x$setinverse(inv)
inv
}
# create a matrix
m <- matrix(c(4, 3, 2, 1), 2, 2)
# create a cache matrix object
cacheM <- makeCacheMatrix(m)
# compute the inverse and cache it
cacheSolve(cacheM)
# retrieve the cached inverse
cacheSolve(cacheM)
# modify the matrix
m <- matrix(c(1, 2, 3, 4), 2, 2)
# set the new matrix in the cache matrix object
cacheM$set(m)
# compute the inverse of the new matrix
cacheSolve(cacheM)
#          [,1]      [,2]
#          [,1]      [,2]
# [1,] -2.000000  1.500000
#          [,1]      [,2]
# [1,] -2.000000  1.500000
# [2,]  1.500000 -0.500000
#          [,1]      [,2]
# [1,] -2.000000  1.500000
# [2,]  1.500000 -0.500000
#          [,1]      [,2]
# [1,] -2.000000  1.500000
# [2,]  1.500000 -0.500000
#          [,1]      [,2]
# [1,] -2.000000  1.500000
# [2,]  1.500000 -0.500000
#          [,1]      [,2]
# [1,] -2.000000  1.500000
# [2,]  1.500000 -0.500000
q()
